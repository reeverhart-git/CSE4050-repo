{"version":3,"sources":["firebase.js","chatbox.js","Home.js","Auth.js","Login.js","SignUp.js","PrivateRoute.js","UpdateProfile.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Chatbox","props","sendMessage","user","auth","currentUser","username","displayName","email","db","firestore","myDate","Timestamp","fromDate","Date","state","newMsgContent","trim","length","collection","add","content","timestamp","setState","componentWillMount","orderBy","onSnapshot","snapshot","messagesData","forEach","doc","push","data","id","messages","listener","event","code","className","forceScroll","this","map","message","placeholder","onKeyDown","value","onChange","e","target","onClick","React","Component","Home","history","useState","setUsername","useEffect","signOut","AuthContext","createContext","AuthProvider","children","setCurrentUser","onAuthStateChanged","Provider","withRouter","handleLogin","useCallback","a","preventDefault","elements","password","signInWithEmailAndPassword","alert","useContext","to","onSubmit","name","type","handleSignUp","createUserWithEmailAndPassword","PrivateRoute","RouteComponent","component","rest","render","routeProps","handleUpdate","displayname","updateProfile","App","exact","path","UpdateProfile","Login","SignUp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.718e737b.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport \"firebase/auth\";\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst config = {\r\n    apiKey: \"AIzaSyAuDR0r2xTnyQLV0B3RqBwKDQ-xF6Z0byk\",\r\n    authDomain: \"cse4050-project.firebaseapp.com\",\r\n    databaseURL: \"https://cse4050-project.firebaseio.com\",\r\n    projectId: \"cse4050-project\",\r\n    storageBucket: \"cse4050-project.appspot.com\",\r\n    messagingSenderId: \"497709309774\",\r\n    appId: \"1:497709309774:web:5a0427ea9bba3b4494481f\",\r\n    measurementId: \"G-WW1ZV5T6P8\"\r\n  };\r\n\r\n  //initialize Firebase\r\n  firebase.initializeApp(config);\r\n\r\n  export default firebase","import { render } from '@testing-library/react';\r\nimport React, { useContext, useEffect, useRef } from 'react';\r\nimport ScrollableFeed from 'react-scrollable-feed'\r\nimport './App.css';\r\nimport firebase from './firebase'\r\n\r\n\r\nclass Chatbox extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            messages: [],\r\n            newMsgContent: \"\",\r\n            displayName: \"Anonymous\"\r\n            \r\n        };\r\n    }\r\n\r\n    \r\n    \r\n    sendMessage = () => {\r\n        var user = firebase.auth().currentUser;\r\n        var username = \"\"\r\n        if (user.displayName == null){\r\n          username = user.email\r\n        }\r\n        else{\r\n          username = user.displayName\r\n        }\r\n        const db = firebase.firestore()\r\n        var myDate = firebase.firestore.Timestamp.fromDate(new Date());\r\n        // Only send a message if its not just whitespace.\r\n        if (this.state.newMsgContent.trim().length > 0){\r\n          db.collection('messages').add({username: username, content: this.state.newMsgContent, timestamp: myDate})\r\n        }\r\n        // Reset the entry form\r\n        this.setState({newMsgContent: \"\"})\r\n        \r\n      }\r\n  \r\n    componentWillMount = () => {\r\n      const db = firebase.firestore()\r\n      //subcribe to changes in firestore database, and return an unsubscribe function\r\n      return db.collection('messages').orderBy(\"timestamp\").onSnapshot((snapshot) => {\r\n        const messagesData = []\r\n        snapshot.forEach(doc => messagesData.push(({ ...doc.data(), id: doc.id, timestamp: doc.timestamp })))\r\n        this.setState({ messages: messagesData})\r\n      })\r\n    }\r\n    \r\n    // listener for the enter button\r\n    listener = event => {\r\n      if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\r\n        this.sendMessage();\r\n      }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            //list of messages frome firestore\r\n            <>\r\n            <div className = \"scrollwrapper\">\r\n                <ScrollableFeed forceScroll className = \"scrollbox\">\r\n                    {this.state.messages.map(message => (\r\n                        <>\r\n                        <li key={message.id} className = \"message\">\r\n                          <span className = \"username\">{message.username}</span>: <span className = \"content\">{message.content}</span>\r\n                        </li>\r\n                        <div id=\"end\"  className = \"anchor\"></div>\r\n                        </>\r\n                    ))}\r\n                </ScrollableFeed>\r\n                <div id = \"MsgBar\" className = \"inputbox\">\r\n                  <input className = \"inputfield\" placeholder = \"Type a message here!\" onKeyDown={this.listener} value={this.state.newMsgContent} onChange={(e) => this.setState({ newMsgContent: e.target.value})}/>\r\n                  <button className = \"button\" onClick={this.sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n          );\r\n    }\r\n}\r\n\r\nexport default Chatbox;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport firebase from './firebase';\r\nimport Chatbox from \"./chatbox\";\r\n\r\nconst Home =  ({ history }) => {\r\n    \r\n    const [ username, setUsername] = useState(firebase.auth().currentUser.email);\r\n\r\n    useEffect(() => {\r\n        if (firebase.auth().currentUser.displayName == null){\r\n            setUsername(firebase.auth().currentUser.email)\r\n        } else {\r\n            setUsername(firebase.auth().currentUser.displayName)\r\n        }\r\n    })\r\n    \r\n    return (\r\n        <>\r\n            <div className = \"userdash\">\r\n                <span>Welcome to the Chat Room,<span className = \"username\">{username}</span>!</span>\r\n                <button className = \"button\" onClick={() => firebase.auth().signOut()}>Sign Out</button>\r\n                <button className = \"button\" onClick={() => history.push(\"/profile\")}>Edit Profile</button>\r\n            </div>\r\n            \r\n            <Chatbox />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Home;","import React, { useEffect, useState } from \"react\";\r\nimport firebase from './firebase'\r\n\r\n\r\nexport const AuthContext = React.createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged(setCurrentUser);\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                currentUser\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};","import React, { useCallback, useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport { AuthContext } from \"./Auth\";\r\nimport firebase from './firebase'\r\n\r\nconst Login = ({ history }) => {\r\n    const handleLogin = useCallback(async event => {\r\n        event.preventDefault();\r\n        const {email, password } = event.target.elements;\r\n        try {\r\n            await firebase\r\n                .auth()\r\n                .signInWithEmailAndPassword(email.value, password.value);\r\n            history.push(\"/\");\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }, [history]);\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    if (currentUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className = \"userdash\">\r\n            <h1 className = \"inputbox\">Log in</h1>\r\n            <form onSubmit={handleLogin}>\r\n                <label>\r\n                    Email\r\n                    <input className = \"inputbox\" name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                </label>\r\n                <label>\r\n                    Password\r\n                    <input className = \"inputbox\" name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n                </label>\r\n                <button className = \"button\" type=\"submit\">Log In</button>\r\n            </form>\r\n            <button className = \"button\" onClick={() => history.push(\"/signup\")}>Not a member?</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(Login);","import React, { useCallback } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\nimport firebase from './firebase'\r\n\r\nconst SignUp = ({ history }) => {\r\n    const handleSignUp = useCallback(async event => {\r\n        event.preventDefault();\r\n        const {email, password } = event.target.elements;\r\n        try {\r\n            await firebase\r\n                .auth()\r\n                .createUserWithEmailAndPassword(email.value, password.value);\r\n            history.push(\"/\");\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }, [history]);\r\n\r\n    return (\r\n        <div className = \"userdash\">\r\n            <h1 className = \"inputbox\">Sign Up</h1>\r\n            <form onSubmit={handleSignUp}>\r\n                <label>\r\n                    Email\r\n                    <input className = \"inputbox\" name=\"email\" type=\"email\" placeholder=\"Email\" />\r\n                </label>\r\n                <label>\r\n                    Password\r\n                    <input className = \"inputbox\" name=\"password\" type=\"password\" placeholder=\"Password\" />\r\n                </label>\r\n                <button className = \"button\" type=\"submit\">Sign Up</button>\r\n            </form>\r\n            <button className = \"button\" onClick={() => history.push(\"/login\")}>Already a member?</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(SignUp);","import React, { useContext } from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { AuthContext } from \"./Auth\";\r\n\r\nconst PrivateRoute = ({ component: RouteComponent, ...rest }) => {\r\n    const {currentUser} = useContext(AuthContext);\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={routeProps =>\r\n                !!currentUser ? (\r\n                    <RouteComponent {...routeProps} />\r\n                ) : (\r\n                    <Redirect to={\"/login\"} />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\n\r\nexport default PrivateRoute","import React, { useCallback, useContext } from \"react\";\r\nimport { Redirect, withRouter } from \"react-router\";\r\nimport { AuthContext } from \"./Auth\";\r\nimport firebase from './firebase'\r\n\r\nconst UpdateProfile = ({ history }) => {\r\n    const handleUpdate = useCallback(async event => {\r\n        event.preventDefault();\r\n        const {displayname} = event.target.elements;\r\n        try {\r\n            await firebase\r\n                .auth()\r\n                currentUser.updateProfile({displayName: displayname.value})\r\n            history.push(\"/\");\r\n        } catch (error) {\r\n            alert(error);\r\n        }\r\n    }, [history]);\r\n\r\n    const { currentUser } = useContext(AuthContext);\r\n\r\n    return (\r\n        <div className = \"userdash\">\r\n            <h1 className = \"inputbox\">Log in</h1>\r\n            <form onSubmit={handleUpdate}>\r\n                <label>\r\n                    Display Name\r\n                    <input className = \"inputbox\" name=\"displayname\" type=\"displayname\" placeholder=\"Displayname\" />\r\n                </label>\r\n                <button className = \"button\" type=\"submit\">Update</button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(UpdateProfile);","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport firebase from './firebase'\nimport Chatbox from './chatbox'\nimport Home from \"./Home\";\nimport Login from \"./Login\";\nimport SignUp from \"./SignUp\";\nimport { AuthProvider } from \"./Auth\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport UpdateProfile from './UpdateProfile';\n\nconst App = () => {\n  return (\n    <AuthProvider>\n      <Router>\n      <div>\n        <PrivateRoute exact path=\"/\" component={Home} />\n        <PrivateRoute exact path=\"/profile\" component={UpdateProfile} />\n        <Route exact path=\"/login\" component={Login} />\n        <Route exact path=\"/signup\" component={SignUp} />\n      </div>\n    </Router>\n    </AuthProvider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Chatbox from './chatbox'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}