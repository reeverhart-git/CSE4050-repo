{"version":3,"sources":["firebase.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","React","useState","messages","setMessages","newMsgContent","setNewMsgContent","displayName","setDisplayName","useRef","useEffect","firestore","collection","orderBy","onSnapshot","snapshot","messagesData","forEach","doc","push","data","id","timestamp","className","map","message","username","content","placeholder","value","onChange","e","target","onClick","db","myDate","Timestamp","fromDate","Date","add","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAeEA,IAASC,cAZI,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMFT,QAAf,ECgCaU,MA7Cf,WAAgB,IAAD,EACmBC,IAAMC,SAAS,IADlC,mBACNC,EADM,KACIC,EADJ,OAE6BH,IAAMC,WAFnC,mBAENG,EAFM,KAESC,EAFT,OAGyBL,IAAMC,SAAS,aAHxC,mBAGNK,EAHM,KAGOC,EAHP,KAyBb,OArBaP,IAAMQ,SAEnBR,IAAMS,WAAU,WAGd,OAFWpB,EAASqB,YAEVC,WAAW,YAAYC,QAAQ,aAAaC,YAAW,SAACC,GAChE,IAAMC,EAAe,GACrBD,EAASE,SAAQ,SAAAC,GAAG,OAAIF,EAAaG,KAAb,2BAAwBD,EAAIE,QAA5B,IAAoCC,GAAIH,EAAIG,GAAIC,UAAWJ,EAAII,gBACvFlB,EAAYY,QAEb,IAaD,cADA,CACA,sBACA,oBAAIO,UAAY,YAAhB,SACGpB,EAASqB,KAAI,SAAAC,GAAO,OACnB,qCACA,+BAAsBA,EAAQC,SAA9B,QAA6CD,EAAQE,UAA5CF,EAAQJ,IACjB,qBAAKA,GAAG,MAAKE,UAAY,mBAI7B,sBAAKF,GAAK,SAAV,UACE,uBAAOO,YAAc,YAAYC,MAAOtB,EAAauB,SAAU,SAACC,GAAD,OAAOvB,EAAeuB,EAAEC,OAAOH,UAC9F,uBAAOD,YAAc,uBAAuBC,MAAOxB,EAAeyB,SAAU,SAACC,GAAD,OAAOzB,EAAiByB,EAAEC,OAAOH,UAC7G,wBAAQI,QArBQ,WAClB,IAAMC,EAAK5C,EAASqB,YAChBwB,EAAS7C,EAASqB,UAAUyB,UAAUC,SAAS,IAAIC,MACvDJ,EAAGtB,WAAW,YAAY2B,IAAI,CAACb,SAAUnB,EAAaoB,QAAStB,EAAeiB,UAAWa,KAkBvF,yBC/BSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9c61a793.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst config = {\r\n    apiKey: \"AIzaSyAuDR0r2xTnyQLV0B3RqBwKDQ-xF6Z0byk\",\r\n    authDomain: \"cse4050-project.firebaseapp.com\",\r\n    databaseURL: \"https://cse4050-project.firebaseio.com\",\r\n    projectId: \"cse4050-project\",\r\n    storageBucket: \"cse4050-project.appspot.com\",\r\n    messagingSenderId: \"497709309774\",\r\n    appId: \"1:497709309774:web:5a0427ea9bba3b4494481f\",\r\n    measurementId: \"G-WW1ZV5T6P8\"\r\n  };\r\n\r\n  //initialize Firebase\r\n  firebase.initializeApp(config);\r\n\r\n  export default firebase","import React from 'react';\nimport './App.css';\nimport firebase from './firebase'\n\nfunction App() {\n  const [messages, setMessages] = React.useState([])\n  const [newMsgContent, setNewMsgContent] = React.useState()\n  const [displayName, setDisplayName] = React.useState(\"Anonymous\")\n  let endRef = React.useRef()\n\n  React.useEffect(() => {\n    const db = firebase.firestore()\n    //subcribe to changes in firestore database, and return an unsubscribe function\n    return db.collection('messages').orderBy(\"timestamp\").onSnapshot((snapshot) => {\n      const messagesData = []\n      snapshot.forEach(doc => messagesData.push(({ ...doc.data(), id: doc.id, timestamp: doc.timestamp })))\n      setMessages(messagesData)\n    })\n  }, [])\n\n  \n\n  const sendMessage = () => {\n    const db = firebase.firestore()\n    var myDate = firebase.firestore.Timestamp.fromDate(new Date());\n    db.collection('messages').add({username: displayName, content: newMsgContent, timestamp: myDate})\n  \n  }\n\n  return (\n    //list of messages frome firestore\n    <>\n    <ul className = \"scrollbox\">\n      {messages.map(message => (\n        <>\n        <li key={message.id}>{message.username}:    {message.content}</li>\n        <div id=\"end\"className = \"anchor\"></div>\n        </>\n      ))}\n    </ul>\n    <div id = \"MsgBar\">\n      <input placeholder = \"Anonymous\" value={displayName} onChange={(e) => setDisplayName(e.target.value)}/>\n      <input placeholder = \"Type a message here!\" value={newMsgContent} onChange={(e) => setNewMsgContent(e.target.value)}/>\n      <button onClick={sendMessage}>Send</button>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}