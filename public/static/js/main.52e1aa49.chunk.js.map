{"version":3,"sources":["firebase.js","chatbox.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Chatbox","props","sendMessage","db","firestore","myDate","Timestamp","fromDate","Date","state","newMsgContent","trim","length","collection","add","username","displayName","content","timestamp","setState","componentWillMount","orderBy","onSnapshot","snapshot","messagesData","forEach","doc","push","data","id","messages","listener","event","code","className","forceScroll","this","map","message","placeholder","value","onChange","e","target","onKeyDown","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOAeEA,IAASC,cAZI,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMFT,QAAf,E,8DCyDaU,E,kDAjEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAQVC,YAAc,WACV,IAAMC,EAAKb,EAASc,YAChBC,EAASf,EAASc,UAAUE,UAAUC,SAAS,IAAIC,MAEnD,EAAKC,MAAMC,cAAcC,OAAOC,OAAS,GAC3CT,EAAGU,WAAW,YAAYC,IAAI,CAACC,SAAU,EAAKN,MAAMO,YAAaC,QAAS,EAAKR,MAAMC,cAAeQ,UAAWb,IAGjH,EAAKc,SAAS,CAACT,cAAe,MAjBf,EAqBnBU,mBAAqB,WAGnB,OAFW9B,EAASc,YAEVS,WAAW,YAAYQ,QAAQ,aAAaC,YAAW,SAACC,GAChE,IAAMC,EAAe,GACrBD,EAASE,SAAQ,SAAAC,GAAG,OAAIF,EAAaG,KAAb,2BAAwBD,EAAIE,QAA5B,IAAoCC,GAAIH,EAAIG,GAAIX,UAAWQ,EAAIR,gBACvF,EAAKC,SAAS,CAAEW,SAAUN,QA3BX,EAgCnBO,SAAW,SAAAC,GACU,UAAfA,EAAMC,MAAmC,gBAAfD,EAAMC,MAClC,EAAK/B,eAhCL,EAAKO,MAAQ,CACTqB,SAAU,GACVpB,cAAe,GACfM,YAAa,aALF,E,qDAsCT,IAAD,OACL,OAEI,aADA,CACA,qBACA,sBAAKkB,UAAY,gBAAjB,UACI,cAAC,IAAD,CAAgBC,aAAW,EAACD,UAAY,YAAxC,SACKE,KAAK3B,MAAMqB,SAASO,KAAI,SAAAC,GAAO,OAC5B,qCACA,qBAAqBJ,UAAY,UAAjC,UACE,sBAAMA,UAAY,WAAlB,SAA8BI,EAAQvB,WADxC,KAC0D,sBAAMmB,UAAY,UAAlB,SAA6BI,EAAQrB,YADtFqB,EAAQT,IAGjB,qBAAKA,GAAG,MAAOK,UAAY,mBAInC,sBAAKL,GAAK,SAASK,UAAY,WAA/B,UACE,uBAAOA,UAAY,aAAaK,YAAc,YAAYC,MAAOJ,KAAK3B,MAAMO,YAAayB,SAAU,SAACC,GAAD,OAAO,EAAKvB,SAAS,CAAEH,YAAa0B,EAAEC,OAAOH,WAChJ,uBAAON,UAAY,aAAaK,YAAc,uBAAuBK,UAAWR,KAAKL,SAAUS,MAAOJ,KAAK3B,MAAMC,cAAe+B,SAAU,SAACC,GAAD,OAAO,EAAKvB,SAAS,CAAET,cAAegC,EAAEC,OAAOH,WACzL,wBAAQN,UAAY,SAASW,QAAST,KAAKlC,YAA3C,8B,GAzDI4C,IAAMC,WC6CbC,ICzCAC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.52e1aa49.chunk.js","sourcesContent":["import firebase from 'firebase'\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst config = {\r\n    apiKey: \"AIzaSyAuDR0r2xTnyQLV0B3RqBwKDQ-xF6Z0byk\",\r\n    authDomain: \"cse4050-project.firebaseapp.com\",\r\n    databaseURL: \"https://cse4050-project.firebaseio.com\",\r\n    projectId: \"cse4050-project\",\r\n    storageBucket: \"cse4050-project.appspot.com\",\r\n    messagingSenderId: \"497709309774\",\r\n    appId: \"1:497709309774:web:5a0427ea9bba3b4494481f\",\r\n    measurementId: \"G-WW1ZV5T6P8\"\r\n  };\r\n\r\n  //initialize Firebase\r\n  firebase.initializeApp(config);\r\n\r\n  export default firebase","import { render } from '@testing-library/react';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport ScrollableFeed from 'react-scrollable-feed'\r\nimport './App.css';\r\nimport firebase from './firebase'\r\n\r\n\r\n\r\nclass Chatbox extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            messages: [],\r\n            newMsgContent: \"\",\r\n            displayName: \"Anonymous\"\r\n        };\r\n    }\r\n    \r\n    sendMessage = () => {\r\n        const db = firebase.firestore()\r\n        var myDate = firebase.firestore.Timestamp.fromDate(new Date());\r\n        // Only send a message if its not just whitespace.\r\n        if (this.state.newMsgContent.trim().length > 0){\r\n          db.collection('messages').add({username: this.state.displayName, content: this.state.newMsgContent, timestamp: myDate})\r\n        }\r\n        // Reset the entry form\r\n        this.setState({newMsgContent: \"\"})\r\n        \r\n      }\r\n  \r\n    componentWillMount = () => {\r\n      const db = firebase.firestore()\r\n      //subcribe to changes in firestore database, and return an unsubscribe function\r\n      return db.collection('messages').orderBy(\"timestamp\").onSnapshot((snapshot) => {\r\n        const messagesData = []\r\n        snapshot.forEach(doc => messagesData.push(({ ...doc.data(), id: doc.id, timestamp: doc.timestamp })))\r\n        this.setState({ messages: messagesData})\r\n      })\r\n    }\r\n    \r\n    // listener for the enter button\r\n    listener = event => {\r\n      if (event.code === \"Enter\" || event.code === \"NumpadEnter\") {\r\n        this.sendMessage();\r\n      }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            //list of messages frome firestore\r\n            <>\r\n            <div className = \"scrollwrapper\">\r\n                <ScrollableFeed forceScroll className = \"scrollbox\">\r\n                    {this.state.messages.map(message => (\r\n                        <>\r\n                        <li key={message.id} className = \"message\">\r\n                          <span className = \"username\">{message.username}</span>: <span className = \"content\">{message.content}</span>\r\n                        </li>\r\n                        <div id=\"end\"  className = \"anchor\"></div>\r\n                        </>\r\n                    ))}\r\n                </ScrollableFeed>\r\n                <div id = \"MsgBar\" className = \"inputbox\">\r\n                  <input className = \"inputfield\" placeholder = \"Anonymous\" value={this.state.displayName} onChange={(e) => this.setState({ displayName: e.target.value})}/>\r\n                  <input className = \"inputfield\" placeholder = \"Type a message here!\" onKeyDown={this.listener} value={this.state.newMsgContent} onChange={(e) => this.setState({ newMsgContent: e.target.value})}/>\r\n                  <button className = \"button\" onClick={this.sendMessage}>Send</button>\r\n                </div>\r\n            </div>\r\n            \r\n            </>\r\n          );\r\n    }\r\n}\r\n\r\nexport default Chatbox;\r\n","import React from 'react';\nimport './App.css';\nimport firebase from './firebase'\nimport Chatbox from './chatbox'\n\nfunction App() {\n\n  // MOVED ALL OF THIS TO A SEPARATE COMPONENT, THIS WILL EVENTUALLY BE REPLACED WITH FUNCTIONALITY\n\n  //const [messages, setMessages] = React.useState([])\n  //const [newMsgContent, setNewMsgContent] = React.useState()\n  //const [displayName, setDisplayName] = React.useState(\"Anonymous\")\n  //let endRef = React.useRef()\n\n  //React.useEffect(() => {\n   // const db = firebase.firestore()\n    //subcribe to changes in firestore database, and return an unsubscribe function\n   // return db.collection('messages').orderBy(\"timestamp\").onSnapshot((snapshot) => {\n      //const messagesData = []\n      //snapshot.forEach(doc => messagesData.push(({ ...doc.data(), id: doc.id, timestamp: doc.timestamp })))\n      //setMessages(messagesData)\n   // })\n  //}, [])\n\n  \n\n  //const sendMessage = () => {\n    //const db = firebase.firestore()\n    //var myDate = firebase.firestore.Timestamp.fromDate(new Date());\n   // db.collection('messages').add({username: displayName, content: newMsgContent, timestamp: myDate})\n  \n // }\n\n  //return (\n    //list of messages frome firestore\n   // <>\n   // <ul className = \"scrollbox\">\n    //  {messages.map(message => (\n      //  <>\n       // <li key={message.id}>{message.username}:    {message.content}</li>\n       // <div id=\"end\"className = \"anchor\"></div>\n       // </>\n     // ))}\n    //</ul>\n    //<div id = \"MsgBar\">\n    //  <input placeholder = \"Anonymous\" value={displayName} onChange={(e) => setDisplayName(e.target.value)}/>\n     // <input placeholder = \"Type a message here!\" value={newMsgContent} onChange={(e) => setNewMsgContent(e.target.value)}/>\n     // <button onClick={sendMessage}>Send</button>\n  //  </div>\n   // </>\n  //);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Chatbox from './chatbox'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chatbox />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}